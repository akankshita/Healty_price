include Geokit::Geocoders

class Admin::DoctorPaymentsController < Admin::AdminController
  def payments
    @payment_records = DoctorPayment.find(:all)
    @payment_records = @payment_records.paginate :page => params[:page],:per_page => 10
  end

	def upload
	      @errors=""
	      @message=""
	      @id = params[:id]
	      if params[:doctor][:video_code] != nil
		upload = params[:doctor][:video_code]
		if !(upload.content_type == "video/x-flv" || upload.content_type == "video/x-m4v")
		  @message += "The uploaded file is not of the correct format. Please upload a Flash video (.flv) file."
		  @errors="X"
		else
		  filename = params[:id]+ "_video.flv"
		  path = File.join("public/images/uploads", filename)
		  path2 = File.join("/images/uploads", filename)
		  File.open(path, "wb") { |f| f.write(upload.read) }
		  @message += "<a href='"+path2+"'>https://www.healthyprice.com"+path2+"</a>"
		  @errors=""
		  sql = "UPDATE doctors SET video_code='Show' WHERE id = " + params[:id]
		  ActiveRecord::Base.connection.execute(sql)
		  #"File upload completed"
		end
	      else
		@message += "Please select a Flash video file (.flv) for upload."
		@errors="X"
	      end
	end

  def new_payment
    @error = params[:error]
    @all_doctors = Doctor.find(:all ,:conditions=>["enabled=?",1],:order =>" first_name asc" )
  end

  def pending_orders
    #render :text=>params['doctor']['id']
    @constraints = Order.find_by_sql("SELECT o.id,o.doctor_service_id,o.created_at,o.first_name, o.last_name,o.doctor_price FROM orders o, doctor_services ds WHERE o.doctor_service_id = ds.id And o.orderstatus='Pending' AND o.submitted='1' AND ds.doctor_id = " + params['doctor']['id'])
    @doctor_details = Doctor.find_by_id(params['doctor']['id'])
    @docname = @doctor_details.first_name << " " << @doctor_details.last_name
    @docid = params['doctor']['id']
  end


  def search
    if params[:clear] != nil && params[:search][:query]!=nil
      redirect_to :action=>"payments"
    else
      session[:querytext]= params[:search][:query]
      if params[:search][:query].length == 8 && params[:search][:query]["/"] == -1
        #@search_text=params[:search][:query]
        @pay_reff = Order.find_by_id(params[:search][:query])
        params[:search][:query]=@pay_reff.doctor_payments_id
        #@payment_records = DoctorPayment.find(:all ,:conditions=>["id=?" ,@pay_reff.doctor_payments_id])
        #@payment_records = @payment_records.paginate :page => params[:page],:per_page => 100
        #render :action=>"payments"  and return false
        #else
      end
      @search_text=session[:querytext]
      if @search_text.match(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)[0-9]{2}/)
        query = @search_text.split("/")
        @payment_records = DoctorPayment.find(:all ,:conditions=>["created_at >= DATE(?) AND created_at < DATE(?)", query[2]+"-"+query[0]+"-"+query[1], query[2]+"-"+query[0]+"-"+(query[1].to_i+1).inspect])
      elsif @search_text.match(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.][0-9]{2}/)
        query = @search_text.split("/")
        @payment_records = DoctorPayment.find(:all ,:conditions=>["created_at >= DATE(?) AND created_at < DATE(?)", "20"+query[2]+"-"+query[0]+"-"+query[1], "20"+query[2]+"-"+query[0]+"-"+(query[1].to_i+1).inspect])
      else
        @payment_records = DoctorPayment.find(:all ,:conditions=>["id=? or doctor_id=? or total_amount=?" ,params[:search][:query],session[:querytext],session[:querytext]])
      end
      @payment_records = @payment_records.paginate :page => params[:page],:per_page => 100
      render :action=>"payments"
    end
  end

  def add_payments
    @date1 = params[:docpayments][:date]
    @error=""
    #render :text=>@date and return false
    if !@date1.match(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)[0-9]{2}/)
      #redirect_to :action=>"new_payment" ,
        @error +="Please enter a valid date in mm/dd/yyyy format."
    end

    @order_doc_price = Order.find_by_id_and_submitted(params[:docpayments][:order_no],1)
     
   
    if @order_doc_price == nil 
      #redirect_to :action=>"new_payment" ,
        @error +="Please enter a valid Order #."
   
    else
      @doctor_id = DoctorService.find_by_id(@order_doc_price.doctor_service_id)
      params[:docpay][:total_amount] = @order_doc_price.doctor_price
      params[:docpay][:created_at] = @date1
      addpay = DoctorPayment.new(params[:docpay])
      
      if @doctor_id.doctor_id == params[:docpay][:doctor_id].to_i
       
       if @order_doc_price.doctor_payments_id !=-1 && @order_doc_price.orderstatus!="Pending" 
      #redirect_to :action=>"new_payment" ,
        @error +="The order you entered is already in a payment."
       
       elsif @order_doc_price.doctor_payments_id ==-1 && @order_doc_price.orderstatus!="Pending"
         #redirect_to :action=>"new_payment" ,
           @error +="The order you entered is not in 'Pending' status. Only orders with a status of 'Pending' may be included in a payment."
       else
         addpay.save
        @reff_id = DoctorPayment.find(:first, :order=> "id desc")
        @doctor_details = Doctor.find_by_id(@reff_id.doctor_id)
        @order_doc_price.update_attribute(:doctor_payments_id,@reff_id.id)
        @order_doc_price.update_attribute(:orderstatus,"Closed")

        recipient = @doctor_details.email
        subject = "You have a payment from HealthyPrice (Payment Reference #  " << "#{@reff_id.id}" <<  ")"
        message =" Dear "<< @doctor_details.title + " " << @doctor_details.first_name + " " + @doctor_details.last_name << ",
                 <br> <br> We have begun processing a new payment to you. <br><br>
                   Payment Reference#: " << "#{@reff_id.id}"  << " <br><br>
                   Please <a style='text-decoration:none;' href='http://www.healthyprice.com/login'> login to your HealthyPrice account </a> to review the details of this payment. You will receive the payment pursuant to the terms of your payment arrangements. <br/>"


        Emailer.deliver_admin_account_status(recipient, subject, message)

        #redirect_to :action=>"edit_details", :id=>@reff_id.id
      end
      else
        #redirect_to :action=>"new_payment" ,
          @error +="The order you entered
                           is for a different provider.
                           It cannot be included to this provider." 
      end
    end
    if @error ==""
      redirect_to :action=>"edit_details", :id=>@reff_id.id
    else
      redirect_to :action=>"new_payment" , :error=>@error
    end
  end

  def show_details

    @payment_show = Order.find_all_by_doctor_payments_id(params[:id])
    @payreffid= params[:id]
  end

  def show_one_order
    @show_order = Order.find_by_id(params[:id])
  end

  def remove_payments
    @change_order = Order.find_by_id(params[:id])
    session['order_doc_reff']=@change_order.doctor_payments_id
    @change_order.update_attribute(:doctor_payments_id,"-1")
    @change_order.update_attribute(:orderstatus,"Pending")
    @tot_amount = Order.find_by_sql("SELECT SUM(doctor_price) as sum FROM orders WHERE doctor_payments_id= " + session['order_doc_reff'].to_s+"")
    @doc_payment_id = DoctorPayment.find_by_id(session['order_doc_reff'])
    @doctor_details = Doctor.find_by_id(@doc_payment_id.doctor_id)
    @doc_payment_id.update_attribute(:total_amount,@tot_amount[0].sum)

    if @doctor_details!=nil
      recipient = @doctor_details.email
      subject = "HealthyPrice payment adjustment (Payment Reference # " << "#{session['order_doc_reff']}" <<  ") "
      message ="  Dear " << @doctor_details.title + " " << @doctor_details.first_name + " " + @doctor_details.last_name << ",<br>
                  <br> We have adjusted a previous payment that was made to you. <br><br>
                   Payment Reference#: " << "#{session['order_doc_reff']}"  << " <br><br>
                   Please <a style='text-decoration:none;' href='http://www.healthyprice.com/login'> login to your HealthyPrice account </a> to review the details of the payment adjustment."


      Emailer.deliver_admin_account_status(recipient, subject, message)

      redirect_to :action=>"edit_details", :id=>session['order_doc_reff']
    else
      redirect_to :action=>"edit_details", :id=>session['order_doc_reff']
    end
  end

  def edit_details
    @error=params['error']
    @payment_edit = Order.find_all_by_doctor_payments_id(params[:id])
    @doctor_payments_id = params[:id]
    @doctor_payment = DoctorPayment.find_by_id(params[:id])
    @doctor_id = @doctor_payment.doctor_id
  end

  def add_orders
    @services_id = Order.find_by_id(params[:orders][:order_no])
    #render :text=>"@services_id.inspect"
    @error=""
    if @services_id == nil
      @error="Please enter a valid order #." 
    else
      @ref_no = params[:orders][:hide_no]
      @doctor_id = DoctorService.find_by_id(@services_id.doctor_service_id)
      if @doctor_id.doctor_id==params[:orders][:doc_no].to_i
        if @services_id.doctor_payments_id==-1 && @services_id.orderstatus=="Pending"  && @services_id.submitted==1
          session[:notes]= @services_id.order_notes
          @services_id.update_attribute(:doctor_payments_id,@ref_no)
          @services_id.update_attribute(:orderstatus,"Closed")
          @services_id.update_attribute(:order_notes,"#{session[:notes]}" << " <br> A payment of " << " #{@services_id.doctor_price}"  << " was paid out on " << Date.today.strftime("%m/%d/%Y"))
          @tot_amount = Order.find_by_sql("SELECT SUM(doctor_price) as sum FROM orders WHERE doctor_payments_id= " + @ref_no+ "")
          @doc_payment_id = DoctorPayment.find_by_id(@ref_no)
          @doc_payment_id.update_attribute(:total_amount,@tot_amount[0].sum)
          @doctor_details = Doctor.find_by_id(params[:orders][:doc_no])
          recipient = @doctor_details.email
          subject = "HealthyPrice payment adjustment (Payment Reference # " << "#{@ref_no}"  <<  ") "
          message ="  Dear " << @doctor_details.title + " " << @doctor_details.first_name + " " + @doctor_details.last_name << ",<br>
                  <br> We have adjusted a previous payment that was made to you. <br><br>
                   Payment Reference#: " << "#{@ref_no}"  << " <br><br>
                   Please <a style='text-decoration:none;' href='http://www.healthyprice.com/login'> login to your HealthyPrice account </a> to review the details of the payment adjustment."


          Emailer.deliver_admin_account_status(recipient, subject, message)
          
         # redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no]  and return false
        elsif @services_id.doctor_payments_id==-1 && @services_id.orderstatus!="Pending"
          #redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no] ,
        @error="The order you entered is not in “Pending” status. Only orders with a status of 'Pending' may be included in a payment."
        elsif  params[:orders][:hide_no]==@services_id.doctor_payments_id.to_s
          #redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no] ,
            @error="The order you entered is already included in this payment." 
        elsif @services_id.doctor_payments_id!=-1 && @services_id.orderstatus!="Pending"
          #redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no] ,
            @error="The order you entered is included in another payment. It cannot be included in this payment (each order may only be included in one payment)"  
        end
      else
        #redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no] ,
          @error="The order you entered
                           is for a different provider.
                           It cannot be included in this payment (each payment may only contain orders
                           for one provider)."
      end
    end
    if @error==""
      redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no]
    else
      redirect_to :action=>"edit_details", :id=>params[:orders][:hide_no],:error=>@error
    end
  end
  def update_details1
    @update_order = Order.find_all_by_doctor_payments_id(params[:id])
    @update_order.each do |order|
      @order = Order.find_by_id(order.id)
    end
    render :text=> params[:doctor_payment][:notes]

  end

  def update_details
    @update_order = DoctorPayment.find_by_id(params[:id])
    @note = params[:doctor_payment][:notes]
    @update_order.update_attribute(:notes,@note)
    #DoctorPayment.find_by_doctor_pay_ref_id(params[:id]).update_attributes(:notes=> @note,:doctor_id=>1 )
    redirect_to :controller=> 'admin/doctor_payments' ,:action=>'payments'

  end

  def details
    @error=params['error']
    #@doc_payment=params['doctor_payment']
    
     #render :text=>@doc_payment
#     if params['doctor_payment']!=nil && params['doctor']!=nil
#       render :text=>params['doctor_payment']['first_name']
#     end
    @orders = Doctor.find_by_id(params[:id])
    @insurance_carriers = Array.new
    carriers = Doctor.find_by_sql("SELECT insurance_company_name FROM insurance_carriers WHERE doctor_id = " + params[:id])
    carriers.each do |carrier|
      @insurance_carriers << carrier.insurance_company_name
    end
    @hospital_affiliations = Array.new
    affiliations = Doctor.find_by_sql("SELECT usage_percentage, hospital FROM hospital_affiliations WHERE doctor_id = " + params[:id])
    affiliations.each do |affiliation|
      tmp_array = Array.new
      tmp_array << affiliation.usage_percentage
      tmp_array << affiliation.hospital
      @hospital_affiliations << tmp_array
    end
    @hospital_affiliations << Array.new
    @hospital_affiliations << Array.new
    @hospital_affiliations << Array.new
    @doctor_references = Array.new
    references = Doctor.find_by_sql("SELECT first_name, last_name, phone FROM doctor_references WHERE doctor_id = " + params[:id])
    references.each do |reference|
      tmp_array = Array.new
      tmp_array << reference.phone
      tmp_array << reference.first_name
      tmp_array << reference.last_name
      @doctor_references << tmp_array
    end
    @doctor_references << Array.new
    @doctor_references << Array.new
    @doctor_references << Array.new
    if session['errors'] != nil
	@error = session['errors']
	session['errors'] = nil
    end
  end

  def update_doctor_details
    render :text=> params[:id]
  end

#end


  def details_update
    #sdgfrfsdfg=fgsdfg
    insurance_carriers = params[:doctor][:insurance_carriers]
    hospital_affiliations = params[:doctor][:hospital_affiliations]
    no_of_insurance_carriers = 0
    @insurance_carriers = Array.new
    no_of_hospital_affiliations = 0
    foo = 0
    @hospital_affiliations = Array.new

    insurance_carriers.each do |ic|
      if ic[1] != ""
        @insurance_carriers << ic[1]
        no_of_insurance_carriers += 1
      end
    end

    hospital_affiliations = params[:doctor][:hospital_affiliations]
    no_of_hospital_affiliations = 0
    foo = 0
    @hospital_affiliations = Array.new
    hospital_affiliations.each do |ha|
      if ha[1]['hospital'] != ""
        ha.each do |has|
          @hospital_affiliations << has[1]
          foo +=1
        end
        no_of_hospital_affiliations += 1
      end
    end

    @errors = ""	### Validation Begin

    if params[:delete_video] != nil
	filename = params[:id]+"_video.flv"
	path = File.join("public/images/uploads", filename)
	File.delete(path)
    end
    if params[:show_video] != nil
	sql = "UPDATE doctors SET video_code='Show' WHERE id = " + params[:id]
	ActiveRecord::Base.connection.execute(sql)
    else
	sql = "UPDATE doctors SET video_code='Hide' WHERE id = " + params[:id]
	ActiveRecord::Base.connection.execute(sql)
    end

    check_duplicate_email = Doctor.find_by_sql("SELECT COUNT(*) as count FROM doctors WHERE id <> " + params[:id] + " AND email = '" + params[:doctor_payment][:email] + "'")
    if params[:doctor_payment][:email]=="" || !params[:doctor_payment][:email].match(/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
      @errors += "Please Enter Valid Email. <br/>"
    end
    if check_duplicate_email[0].count != "0"
      @errors += "The email address you entered has been registered with another HealthyPrice account. Please enter a unique email address.<br/>"
    end
    if params[:doctor_payment][:password]!= ""
      if params[:doctor_payment][:password]== "" || !params[:doctor_payment][:password].index(/[0-9]/) || !params[:doctor_payment][:password].index(/[a-z]/) || params[:doctor_payment][:password].size < 6
        @errors += "Please enter a valid password. The password must be 6 characters or more in length and contain both letters and numbers.<br/>"
      end
    end
    if params[:doctor_payment][:password]!=params[:doctor_payment][:password_confirmation]
      @errors += "Password confirmation does not match. <br/>"
    end
    if params[:doctor_payment][:first_name]=="" || params[:doctor_payment][:last_name]==""
      @errors += "The First Name/Last Name Should not be Blank. <br/>"
    end
    if !params[:doctor_payment][:date_of_birth].match(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)[0-9]{2}/)
      @errors += "Please enter a valid date of birth in mm/dd/yyyy format. <br/>"
    end
    if !params[:doctor_payment][:phone].match(/\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}/) || !params[:doctor_payment][:fax].match(/\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}/)
      @errors += "Please enter a valid phone number/Fax Number. <br/>"
    end
#    if !params[:doctor_payment][:public_phone].match(/\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}/)
#      @errors += "Please enter a valid Public Phone number. <br/>"
#    end
    if params[:doctor_payment][:tax_id_type] == "SSN"
      if !params[:doctor_payment][:tax_id].match(/\b[0-9]{3}-[0-9]{2}-[0-9]{4}\b/)
        @errors += "Please enter a valid SSN. <br/>"
      end
    elsif params[:doctor_payment][:tax_id_type] == "EIN"
      if !params[:doctor_payment][:tax_id].match(/\b[0-9]{2}-[0-9]{7}\b/)
        @errors += "Please enter a valid EIN. <br/>"
      end
    else
      @errors += "Please select a Tax id Type. <br/>"
    end
    if params[:doctor_payment][:medical_school]==""
      @errors += "Please enter the name of your medical school. <br/>"
    end
    if params[:doctor_payment][:type_of_degree]==""
      @errors += "Please enter the type of medical degree. <br/>"
    end
    if params[:doctor_payment][:graduated_year]==""
      @errors += "Please enter the year you graduated from medical school. <br/>"
    end
    if params[:doctor_payment][:medical_license_state]==""
      @errors += "Please select the state that issued your medical license. <br/>"
    end
    if params[:doctor_payment][:license_no]==""
      @errors += "Please enter your medical license number. <br/>"
    end
    if params[:doctor_payment][:company]==""
      @errors += "Please enter the name of your practice. <br/>"
    end
    if params[:doctor_payment][:address]==""
      @errors += "Please enter the street address of your practice. <br/>"
    end
    if params[:doctor_payment][:city]==""
      @errors += "Please enter the city where your practice is located. <br/>"
    end
    if params[:doctor_payment][:state]==""
      @errors += "Please enter the state where your practice is located. <br/>"
    end
    if params[:doctor_payment][:mailing_address]==""
      @errors += "Please enter the mailing street address. <br/>"
    end
    if params[:doctor_payment][:mailing_city]==""
      @errors += "Please enter the mailing address city. <br/>"
    end
    if params[:doctor_payment][:mailing_state]==""
      @errors += "Please enter the mailing address state. <br/>"
    end
    if params[:doctor_payment][:description]==""
      @errors += "Please enter a description of your practice. <br/>"
    end
    if !params[:doctor_payment][:zipcode].match(/^\d{5}(-\d{4})?$/) || !params[:doctor_payment][:mailing_zipcode].match(/\b[0-9]{5}(?:-[0-9]{4})?\b/)
      @errors += "Please enter a valid ZIP in 12345-6789 format (you may enter just the first five digits). <br/>"
    end
    if params[:doctor_payment][:website]!=""
      if  params[:doctor_payment][:website] != "" && !(params[:doctor_payment][:website].match(/^(http|https):\/\/[a-z0-9]+([-.]{1}[a-z0-9]+)*.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/ix) || params[:doctor_payment][:website].match(/^(www).[a-z0-9]+([-.]{1}[a-z0-9]+)*.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/ix))
        @errors += "Please enter your website address in www.yourname.ext format where 'ext' is the domain extension (i.e., com, net, org, biz, etc.). <br/>"
      end
    end
    if !params[:doctor_payment][:insurance_expiry_date].match(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)[0-9]{2}/)
      @errors += "Please enter a valid malpractice insurance expiration date in mm/dd/yyyy format.<br/>"
    end
    if params[:doctor_payment][:insurance_policy_no]==""
      @errors += "Please enter your Malpractice Insurance Policy Number.<br/>"
    end
    if params[:doctor_payment][:insurance_carrier]==""
      @errors += "Please enter your Malpractice Insurance Carrier.<br/>"
    end
    if params[:doctor_payment][:payment_method] == nil || params[:doctor_payment][:payment_method] == ""
      @errors += "Please select your Payment Method.<br/>"
    elsif params[:doctor_payment][:payment_method] == "PayPal" && !params[:doctor_payment][:paypal_email].match(/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
      @errors += "Please enter your valid PayPal Email address.<br/>"
    end
    if @insurance_carriers.size < 2
      @errors += "At least two Insurance company names are required. <br/>"
    else
      sql = "DELETE FROM insurance_carriers WHERE doctor_id = " + params[:id]
      ActiveRecord::Base.connection.execute(sql)
      no_of_in_ca = 0
      insurance_carriers.each do |ic|
        if ic[1] != ""
          sql = "INSERT INTO insurance_carriers(doctor_id, insurance_company_name) " +
            "VALUES(" + params[:id] + ", '" + ic[1] + "')"
          ActiveRecord::Base.connection.execute(sql)
          no_of_in_ca += 1
        end
      end
    end
    if @hospital_affiliations.size < 2
      @errors += "At least One Hospital Affiliation is required. <br/>"
    else
      sql = "DELETE FROM hospital_affiliations WHERE doctor_id = " + params[:id]
      ActiveRecord::Base.connection.execute(sql)
      no_of_hos_aff = 0
      @hospital_aff = Array.new
      hospital_affiliations.each do |ha|
        tmp_array = Array.new
        ha[1].each do |row|
          tmp_array << row[1]
        end
        tmp_array[0] = tmp_array[0].gsub("%", "")
        @hospital_aff<< tmp_array
        if tmp_array[1] != ""
          if (tmp_array[0] == tmp_array[0].to_i.inspect) && tmp_array[0].to_i <= 100 && tmp_array[0].to_i > 0
            sql = "INSERT INTO hospital_affiliations(doctor_id, hospital, usage_percentage) " +
              "VALUES(" + params[:id] + ", '" + tmp_array[1] + "', " + tmp_array[0] + ")"
            ActiveRecord::Base.connection.execute(sql)
            no_of_hos_aff += 1
          end
        end
      end
    end
    ### Validation Ends

    @order = Doctor.new(params[:doctor_payment])
    @record = Doctor.find(params[:id])
    tmp_full_address = @record.full_address

    if @record.onhold==1 && params[:doctor_payment][:onhold]==nil
      params[:doctor_payment][:onhold_note]="HealthyPrice released a hold on this account"
      params[:doctor_payment][:onhold_date]=Date.today
    end
    if @record.onhold==0 && params[:doctor_payment][:onhold]=="1"
      params[:doctor_payment][:onhold_note]="This account was placed on-hold by HealthyPrice"
      params[:doctor_payment][:onhold_date]=Date.today
    end
    if @record.enabled==1 && params[:doctor_payment][:enabled]==nil
      params[:doctor_payment][:enabled_note]="This account was disabled by HealthyPrice"
      params[:doctor_payment][:enabled_date]=Date.today
    end
    if @record.enabled==0 && params[:doctor_payment][:enabled]=="1"
      params[:doctor_payment][:enabled_note]="HealthyPrice enabled this account"
      params[:doctor_payment][:enabled_date]=Date.today
    end

    if params[:doctor_payment][:spanish]==nil
      params[:doctor_payment][:spanish]=0
    end
    if params[:doctor_payment][:onhold]==nil
      params[:doctor_payment][:onhold]=0
    end
    if params[:doctor_payment][:enabled]==nil
      params[:doctor_payment][:enabled]=0
    end
    if params[:doctor_payment][:signup_step]=="8"
      params[:doctor_payment][:signup_step]=9
    end

    session['onhold_status']=@record.onhold
    session['enabled_status']=@record.enabled
    session['signup_step']=@record.signup_step

#doctor_references
      doctor_references = params[:doctor][:doctor_references]
      sql = "DELETE FROM doctor_references WHERE doctor_id = " + params[:id]
      ActiveRecord::Base.connection.execute(sql)
      no_of_doctor_references = 0
      @doctor_references = Array.new
      doctor_references.each do |dr|
        tmp_array = Array.new
        dr[1].each do |row|
          tmp_array << row[1]
        end
        @doctor_references << tmp_array
        if (tmp_array[0] + tmp_array[1] + tmp_array[2] != "")
          if tmp_array[0] == "" || tmp_array[1] == "" || tmp_array[2] == ""
            @errors += "Please enter both the name and phone number for the doctor reference or leave all three fields blank. <br/>"
          elsif !tmp_array[0].match(/\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}/)
            @errors += "Please enter a valid phone number. <br/>"
          else
            sql = "INSERT INTO doctor_references(doctor_id, first_name, last_name, phone) " +
              "VALUES(" + params[:id] + ", '" + tmp_array[1] + "', '" + tmp_array[2] + "', '" + tmp_array[0] + "')"
            ActiveRecord::Base.connection.execute(sql)
            no_of_doctor_references += 1
          end
        end
      end
#doctor_references

#Upload Begin
      if params[:doctor][:headshot_photo] != nil
        upload = params[:doctor][:headshot_photo]
        if !(upload.content_type == "image/jpe" || upload.content_type == "image/jpeg" || upload.content_type == "image/jpg" || upload.content_type == "image/pjpeg")
          @errors += "Please select a photo of yourself to be placed on your profile (it must be a JPEG image with a .jpg file extension). <br/>"
        else
          name =  upload.original_filename
          filename = params[:id] + "_headshot.jpg"
          path = File.join("public/images/uploads", filename)
          File.open(path, "wb") { |f| f.write(upload.read) }
          filesize = File.size(path)
          if filesize > 307200	#2097152
            File.unlink(path)
            @errors += "You have selected image files that exceed the maximum image size of 300KB. Please reduce the file size of your images and upload them again.<br/>"
          else
            sql = "INSERT INTO doctor_photos(content_type, filename, size, width, height, doctor_id, photo_type) " +
              "VALUES('"+upload.content_type+"', '"+filename+"', "+filesize.inspect+", 150, 75, "+params[:id].inspect+", 'headshot')"
            ActiveRecord::Base.connection.execute(sql)
          end
        end
      end

      if params[:doctor][:practice_photo] != nil
        upload = params[:doctor][:practice_photo]
        if !(upload.content_type == "image/jpe" || upload.content_type == "image/jpeg" || upload.content_type == "image/jpg" || upload.content_type == "image/pjpeg")
          @errors += "Please select a photo of your practice to be placed on your profile (it must be a JPEG image with a .jpg file extension). <br/>"
        else
          name =  upload.original_filename
          filename = params[:id]+ "_practice.jpg"
          path = File.join("public/images/uploads", filename)
          File.open(path, "wb") { |f| f.write(upload.read) }
          filesize = File.size(path)
          if filesize > 307200	#2097152
            File.unlink(path)
            @errors += "You have selected image files that exceed the maximum image size of 300KB. Please reduce the file size of your images and upload them again.<br/>"
          else
            sql = "INSERT INTO doctor_photos(content_type, filename, size, width, height, doctor_id, photo_type) " +
              "VALUES('"+upload.content_type+"', '"+filename+"', "+filesize.inspect+", 150, 75, "+params[:id].inspect+", 'practice')"
            ActiveRecord::Base.connection.execute(sql)
          end
        end
      end
#Upload End

########################################################################33
########################################################################33
=begin
      if params[:doctor][:video_code] != nil
        upload = params[:doctor][:video_code]
        if !(upload.content_type == "image/jpe" || upload.content_type == "image/jpeg" || upload.content_type == "image/jpg" || upload.content_type == "image/pjpeg")
          @errors += upload.content_type+"<br/>"
        else
          name =  upload.original_filename
          filename = params[:id]+ "_video.flv"
          path = File.join("public/images/uploads", filename)
          File.open(path, "wb") { |f| f.write(upload.read) }
          #filesize = File.size(path)
          #if filesize > 2097152*10
            #File.unlink(path)
            #@errors += "The file you have selected is too large. (Larger than 20MB). <br/>"
          #else
            #
          #end
        end
      end
=end
########################################################################33
########################################################################33

if @errors == ""
    if @record.update_attributes(params[:doctor_payment])
      sql = "DELETE FROM insurance_carriers WHERE doctor_id = " + params[:id]
      ActiveRecord::Base.connection.execute(sql)
      no_of_in_ca = 0
      #@insurance_carriers = Array.new
      insurance_carriers.each do |ic|
        if ic[1] != ""
          sql = "INSERT INTO insurance_carriers(doctor_id, insurance_company_name) " +
            "VALUES(" + params[:id] + ", '" + ic[1] + "')"
          ActiveRecord::Base.connection.execute(sql)
          #@insurance_carriers << ic[1]
          no_of_in_ca += 1
        end
      end

      sql = "DELETE FROM hospital_affiliations WHERE doctor_id = " + params[:id]
      ActiveRecord::Base.connection.execute(sql)
      no_of_hos_aff = 0
      @hospital_aff = Array.new
      hospital_affiliations.each do |ha|
        tmp_array = Array.new
        ha[1].each do |row|
          tmp_array << row[1]
        end
        tmp_array[0] = tmp_array[0].gsub("%", "")
        @hospital_aff<< tmp_array
        if tmp_array[1] != ""
          if (tmp_array[0] == tmp_array[0].to_i.inspect) && tmp_array[0].to_i <= 100 && tmp_array[0].to_i > 0
            sql = "INSERT INTO hospital_affiliations(doctor_id, hospital, usage_percentage) " +
              "VALUES(" + params[:id] + ", '" + tmp_array[1] + "', " + tmp_array[0] + ")"
            ActiveRecord::Base.connection.execute(sql)
            no_of_hos_aff += 1
          end
        end
      end

      



      if session['onhold_status']==1 && params[:doctor_payment][:onhold]==0
        recipient = @record.email
        subject = "HealthyPrice Account Hold Removed"
        message ="Dear " << @record.title + " " << @record.first_name + " " +@record.last_name << ",<br>
				<br> The hold that was placed on your account has been released by HealthyPrice as of " << " " + Date.today.strftime("%m/%d/%Y") << ".
        <br/><br/> Your provider profile will once again be visible on HealthyPrice and you will be able to receive new orders. <br/><br/>
           If you did not request this change, <a style='text-decoration:none;' href='http://www.healthyprice.com/page/contact_us'> please contact HealthyPrice. </a>"
        Emailer.deliver_admin_account_status(recipient, subject, message)
        #redirect_to :controller=> 'admin/doctors' and return false
      end
      if session['onhold_status']==0 && params[:doctor_payment][:onhold]=="1"
        recipient = @record.email
        subject = "HealthyPrice Account Placed On Hold"
        message ="Dear "  << @record.title + " " << @record.first_name + " " +@record.last_name << ",<br>
				<br> HealthyPrice has placed your provider account on hold as of " << " " + Date.today.strftime("%m/%d/%Y") <<
          ".<br/> <br/>
         Your provider profile will no longer be visible on HealthyPrice and you will not receive new orders. Please note that you must continue to service orders that have already been placed.
          <br/> <br/> If you did not request this change, <a style='text-decoration:none;' href='http://www.healthyprice.com/page/contact_us'> please contact HealthyPrice. </a>"
        Emailer.deliver_admin_account_onhold(recipient, subject, message)
        #redirect_to :controller=> 'admin/doctors' and return false
      end
      if session['enabled_status']==1 && params[:doctor_payment][:enabled]==0
        recipient = @record.email
        subject = "Your HealthyPrice Account Has Been Disabled"
        message ="Dear " << @record.title + " " << @record.first_name + " " +@record.last_name << ",<br>
				<br> Your HealthyPrice account has been Disabled. "
        Emailer.deliver_admin_account_status(recipient, subject, message)
        #redirect_to :controller=> 'admin/doctors' and return false
      end
      if session['enabled_status']==0 && params[:doctor_payment][:enabled]=="1" && session['signup_step'] ==9
        recipient = @record.email
        subject = "Your HealthyPrice Account Has Been Activated"
        message ="Dear " << @record.title + " " << @record.first_name + " " +@record.last_name << ",<br>
				<br> Your HealthyPrice account has been activated. <br/><br/>
              You may now <a style='text-decoration:none;' href='http://www.healthyprice.com/login'> login to your account. </a>"
        Emailer.deliver_admin_account_status(recipient, subject, message)
        #redirect_to :controller=> 'admin/doctors' and return false
      end
      if session['enabled_status']==0 && params[:doctor_payment][:enabled]=="1" && session['signup_step'] ==8
        recipient = @record.email
        subject = "Your HealthyPrice Account Has Been Approved! "
        message ="Dear " << @record.title + " " << @record.first_name + " " +@record.last_name << ",<br>
				<br> Congratulations, your application submitted to HealthyPrice has been approved! <br/><br/>
            To complete activation of your HealthyPrice account and begin receiving orders, please  <a style='text-decoration:none;' href='http://www.healthyprice.com/login'> login to your HealthyPrice account.</a>"
        Emailer.deliver_admin_account_status(recipient, subject, message)
        #redirect_to :controller=> 'admin/doctors' and return false
      end
#send mail

	@record.update_attributes(params[:doctor_payment])
	if tmp_full_address != @record.full_address
		location = GoogleGeocoder.geocode(@record.full_address)
		@record.lat = location.lat
		@record.lng = location.lng
		@record.save(false)
	end
	if @errors == ""
		redirect_to '/admin/doctors'
	else
		#redirect_to "/admin/doctors/edit_details/" + params[:id], :error=>@errors
		#render :action => 'details'
		#:action => "details", :doctor_payment => params[:doctor_payment]
		session['errors'] = @errors
		redirect_to "/admin/doctors/edit_details/" + params[:id]
	end

  end
  #end


end
#end
